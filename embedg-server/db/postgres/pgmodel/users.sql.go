// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package pgmodel

import (
	"context"
	"database/sql"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, discriminator, avatar, is_tester FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Discriminator,
		&i.Avatar,
		&i.IsTester,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (id, name, discriminator, avatar) VALUES ($1, $2, $3, $4) ON CONFLICT (id) DO UPDATE SET name = $2, discriminator = $3, avatar = $4 RETURNING id, name, discriminator, avatar, is_tester
`

type UpsertUserParams struct {
	ID            string
	Name          string
	Discriminator string
	Avatar        sql.NullString
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, upsertUser,
		arg.ID,
		arg.Name,
		arg.Discriminator,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Discriminator,
		&i.Avatar,
		&i.IsTester,
	)
	return i, err
}
