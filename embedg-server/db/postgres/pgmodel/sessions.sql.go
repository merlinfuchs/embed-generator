// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package pgmodel

import (
	"context"
	"encoding/json"
	"time"
)

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE token_hash = $1
`

func (q *Queries) DeleteSession(ctx context.Context, tokenHash string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, tokenHash)
	return err
}

const getSession = `-- name: GetSession :one
SELECT token_hash, user_id, access_token, created_at, expires_at, guilds FROM sessions WHERE token_hash = $1
`

func (q *Queries) GetSession(ctx context.Context, tokenHash string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, tokenHash)
	var i Session
	err := row.Scan(
		&i.TokenHash,
		&i.UserID,
		&i.AccessToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Guilds,
	)
	return i, err
}

const getSessionsForUser = `-- name: GetSessionsForUser :many
SELECT token_hash, user_id, access_token, created_at, expires_at, guilds FROM sessions WHERE user_id = $1
`

func (q *Queries) GetSessionsForUser(ctx context.Context, userID string) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.TokenHash,
			&i.UserID,
			&i.AccessToken,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Guilds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSession = `-- name: InsertSession :one
INSERT INTO sessions (token_hash, user_id, guilds, access_token, created_at, expires_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING token_hash, user_id, access_token, created_at, expires_at, guilds
`

type InsertSessionParams struct {
	TokenHash   string
	UserID      string
	Guilds      json.RawMessage
	AccessToken string
	CreatedAt   time.Time
	ExpiresAt   time.Time
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, insertSession,
		arg.TokenHash,
		arg.UserID,
		arg.Guilds,
		arg.AccessToken,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.TokenHash,
		&i.UserID,
		&i.AccessToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Guilds,
	)
	return i, err
}
