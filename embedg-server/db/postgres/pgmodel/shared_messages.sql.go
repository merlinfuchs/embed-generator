// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shared_messages.sql

package pgmodel

import (
	"context"
	"encoding/json"
	"time"
)

const deleteExpiredSharedMessages = `-- name: DeleteExpiredSharedMessages :exec
DELETE FROM shared_messages WHERE expires_at < $1
`

func (q *Queries) DeleteExpiredSharedMessages(ctx context.Context, expiresAt time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSharedMessages, expiresAt)
	return err
}

const getSharedMessage = `-- name: GetSharedMessage :one
SELECT id, created_at, expires_at, data FROM shared_messages WHERE id = $1
`

func (q *Queries) GetSharedMessage(ctx context.Context, id string) (SharedMessage, error) {
	row := q.db.QueryRowContext(ctx, getSharedMessage, id)
	var i SharedMessage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Data,
	)
	return i, err
}

const insertSharedMessage = `-- name: InsertSharedMessage :one
INSERT INTO shared_messages (id, created_at, expires_at, data) VALUES ($1, $2, $3, $4) RETURNING id, created_at, expires_at, data
`

type InsertSharedMessageParams struct {
	ID        string
	CreatedAt time.Time
	ExpiresAt time.Time
	Data      json.RawMessage
}

func (q *Queries) InsertSharedMessage(ctx context.Context, arg InsertSharedMessageParams) (SharedMessage, error) {
	row := q.db.QueryRowContext(ctx, insertSharedMessage,
		arg.ID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.Data,
	)
	var i SharedMessage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Data,
	)
	return i, err
}
